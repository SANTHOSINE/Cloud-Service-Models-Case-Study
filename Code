import pandas as pd
import altair as alt

# --- 1. Load the Dataset ---
df = pd.read_csv("Learning_Resources_Database Dataset.csv")

# --- 2. Define and Apply Classification Logic ---
def classify_cloud_model(row):
    """
    Classifies a learning resource into a Cloud Service Model
    based on the content Type and Format.

    SaaS is prioritized as it represents end-user finished software/content.
    PaaS/IaaS are reserved for resources hinting at data access or platform development.
    """
    # PaaS/IaaS indicators (data access, code, underlying platforms)
    paas_iaas_indicators = [
        'API', 'Data Set', 'Data', 'Code', 'Repository', 'Source Code'
    ]

    # Combine Type and Format for a broader check
    text = str(row['Type']) + " " + str(row['Format'])

    # Check for PaaS/IaaS keywords in the combined text
    if any(ind in text for ind in paas_iaas_indicators):
        return 'PaaS/IaaS (Platform/Infrastructure)'

    # All other finished content (videos, documents, web pages, webinars)
    # are consumed as final software and are classified as SaaS.
    else:
        return 'SaaS (Software)'

# Apply the function to create the new classification column
df['Cloud_Service_Model'] = df.apply(classify_cloud_model, axis=1)


# --- 3. Quantitative Analysis: Calculate Distribution ---
model_counts = df['Cloud_Service_Model'].value_counts().reset_index()
model_counts.columns = ['Cloud_Service_Model', 'Count']
total_count = model_counts['Count'].sum()
model_counts['Percentage'] = (model_counts['Count'] / total_count) * 100

print("--- Cloud Service Model Distribution ---")
print(model_counts.to_markdown(index=False, numalign="left", stralign="left"))


# --- 4. Quantitative Analysis: Generate Visualization (Bar Chart) ---
chart = alt.Chart(model_counts).mark_bar().encode(
    # Sort the bars by Count in descending order
    x=alt.X('Count', title='Number of Resources'),
    y=alt.Y('Cloud_Service_Model', title='Cloud Service Model', sort='-x'),
    color='Cloud_Service_Model',
    tooltip=[
        'Cloud_Service_Model',
        'Count',
        alt.Tooltip('Percentage', format='.1f', title='Percentage')
    ]
).properties(
    title='Distribution of Learning Resources by Classified Cloud Service Model (SDG 4 Case Study)'
)

# Save the chart as a JSON file
chart.save('cloud_model_distribution_bar_chart.json')
print("\n[SUCCESS] Bar chart saved to 'cloud_model_distribution_bar_chart.json'")


# --- 5. Qualitative Analysis: Extract Examples ---
# Since the analysis showed 100% SaaS, we only extract a clear SaaS example.
saas_example = df[df['Cloud_Service_Model'] == 'SaaS (Software)'].iloc[0]

examples_df = pd.DataFrame([{
    'Resource Name': saas_example['Resource Name'],
    'Type': saas_example['Type'],
    'Format': saas_example['Format'],
    'Cloud Model': saas_example['Cloud_Service_Model'],
    'Rationale': 'Consumed as final, ready-to-use content (e.g., via a video player application).'
}])

print("\n--- Example Resource for Case Study (SaaS) ---")
print(examples_df.to_markdown(index=False, numalign="left", stralign="left"))

# --- 6.Bar Chart ---
plt.figure(figsize=(8,5))
sns.barplot(data=model_counts, x='Count', y='Cloud_Service_Model', palette='viridis')
plt.title('Distribution of Learning Resources by Cloud Service Model (SDG 4 Case Study)')
plt.xlabel('Number of Resources')
plt.ylabel('Cloud Service Model')
plt.show()

# --- 7.Pie Chart ---
plt.figure(figsize=(6,6))
plt.pie(model_counts['Count'], labels=model_counts['Cloud_Service_Model'], 
        autopct='%1.1f%%', startangle=140, colors=sns.color_palette('viridis', len(model_counts)))
plt.title('Percentage Distribution of Cloud Service Models (SDG 4 Case Study)')
plt.show()
